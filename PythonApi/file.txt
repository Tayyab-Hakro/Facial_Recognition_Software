import os
import cv2
import face_recognition
import csv
from datetime import datetime
# from flask import Flask, request, jsonify
# from flask_cors import CORS

# app = Flask(__name__)
# CORS(app)

# === Paths ===
DATASET_FOLDER = "./Dataset"
RESIZED_DATASET = "./resized_dataset"
ATTENDANCE_FILE = "attendance.csv"

os.makedirs(DATASET_FOLDER, exist_ok=True)
os.makedirs(RESIZED_DATASET, exist_ok=True)

# === Ensure attendance file exists ===
if not os.path.exists(ATTENDANCE_FILE):
    with open(ATTENDANCE_FILE, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["Name", "Date", "Time"])

# === Encode known faces ===
known_encodings = []
known_names = []

def load_known_faces():
    global known_encodings, known_names
    known_encodings, known_names = [], []
    for person_name in os.listdir(RESIZED_DATASET):
        person_folder = os.path.join(RESIZED_DATASET, person_name)
        if os.path.isdir(person_folder):
            for image_name in os.listdir(person_folder):
                image_path = os.path.join(person_folder, image_name)
                image = face_recognition.load_image_file(image_path)
                encodings = face_recognition.face_encodings(image)
                if encodings:
                    known_encodings.append(encodings[0])
                    known_names.append(person_name)
    print(f"‚úÖ Encoded {len(known_names)} known faces successfully.")

load_known_faces()

recognized_today = set()

def mark_attendance(name):
    now = datetime.now()
    date = now.strftime("%Y-%m-%d")
    time = now.strftime("%H:%M:%S")
    if name not in recognized_today:
        with open(ATTENDANCE_FILE, "a", newline="") as file:
            writer = csv.writer(file)
            writer.writerow([name, date, time])
        recognized_today.add(name)
        print(f"üü© Attendance marked for: {name} at {time}")

# ===============================
# üü© Webcam Face Recognition Section
# ===============================
def start_webcam_recognition():
    print("üé• Starting webcam... Press 'q' to quit.")
    video = cv2.VideoCapture(0)

    if not video.isOpened():
        print("‚ùå Webcam not found or cannot be accessed.")
        return

    while True:
        ret, frame = video.read()
        if not ret:
            break

        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_frame)
        face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

        for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
            matches = face_recognition.compare_faces(known_encodings, face_encoding, tolerance=0.5)
            name = "Unknown"

            if True in matches:
                index = matches.index(True)
                name = known_names[index]
                mark_attendance(name)

            # Draw rectangle and name
            color = (0, 255, 0) if name != "Unknown" else (0, 0, 255)
            cv2.rectangle(frame, (left, top), (right, bottom), color, 2)
            cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)

        cv2.imshow("Face Recognition Attendance", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    video.release()
    cv2.destroyAllWindows()
    print("üõë Webcam closed.")

# Uncomment this line to run webcam recognition directly
start_webcam_recognition()

# =========================================
# Flask API (commented, can be re-enabled later)
# =========================================
"""
@app.route("/check_face", methods=["POST"])
def check_face():
    try:
        if "image" not in request.files:
            return jsonify({"success": False, "name": "No image received"})

        file = request.files["image"]
        image_path = "temp.jpg"
        file.save(image_path)

        unknown_image = face_recognition.load_image_file(image_path)
        unknown_encodings = face_recognition.face_encodings(unknown_image)

        if not unknown_encodings:
            return jsonify({"success": False, "name": "No face detected"})

        unknown_encoding = unknown_encodings[0]
        matches = face_recognition.compare_faces(known_encodings, unknown_encoding, tolerance=0.5)
        name = "Unknown"

        if True in matches:
            index = matches.index(True)
            name = known_names[index]
            mark_attendance(name)
            print(f"‚úÖ Recognized: {name}")
            return jsonify({"success": True, "name": name})
        else:
            return jsonify({"success": False, "name": "Unknown"})
    except Exception as e:
        print("‚ùå Error:", e)
        return jsonify({"success": False, "message": str(e)}), 500


if __name__ == "__main__":
    app.run(host="127.0.0.1", port=5000, debug=True)
"""
